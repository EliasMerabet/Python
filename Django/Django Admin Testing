TEMPLATE
-- index.html --

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Prueba Tabla Editable</title>
    <script src="../TablaJS/static/prueba.js"></script>
    <script type="text/javascript">
  		function editable(x){
			document.getElementById(x).style.backgroundColor = "silver";
			document.getElementById(x).style.boxShadow = "5px 2px 2px black";
		}
		
		function salvar(x){
			var y = document.getElementById(x).value
			document.getElementById(x).style.backgroundColor = "transparent";
			document.getElementById(x).style.boxShadow = "0px 0px 0px black";
		}
	</script>
</head>
    
<body>

<table id="example" class="display" width="100%" cellspacing="0">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Posicion</th>
                <th>Oficina</th>
                <th>Fecha</th>
                <th>Salario</th>
            </tr>
            {% for empleado in empleados %}
            <tr>
            	<th><input id="nombre-{{ empleado.identificador }}" type="text" style="text-align: right;" value="{{ empleado.nombre }}" onblur="salvar('nombre')" onclick="editable('nombre')"/></th>
            	<th><input id="apellido-{{ empleado.identificador }}" type="text" style="text-align: right;" value="{{ empleado.apellido }}" onblur="salvar('apellido')" onclick="editable('apellido')"/></th>
            	<th><input id="posicion-{{ empleado.identificador }}" type="text" style="text-align: right;" value="{{ empleado.posicion }}" onblur="salvar('posicion')" onclick="editable('posicion')"/></th>
            	<th><input id="oficina-{{ empleado.identificador }}" type="text" style="text-align: right;" value="{{ empleado.oficina }}" onblur="salvar('oficina')" onclick="editable('oficina')"/></th>
            	<th><input id="fecha-{{ empleado.identificador }}" type="text" style="text-align: right;" value="{{ empleado.fecha }}" onblur="salvar('fecha')" onclick="editable('fecha')"/></th>
            	<th><input id="salario-{{ empleado.identificador }}" type="text" style="text-align: right;" value="{{ empleado.salario }}" onblur="salvar('salario')" onclick="editable('salario')"/></th>

            </tr>
            {% endfor %}
        </thead>
</table>
</body>


WSGI.PY

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "Pruebas.settings")

application = get_wsgi_application()


URLS.PY

from django.conf.urls import url
from django.contrib import admin

admin.autodiscover()

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^$', 'Plana.views.index', name="Index"),
]



SETTINGS.PY

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%cmsd-ruujb_l-%@*qs&p4$!fziq%m^n2+lnm^t4*w2)!&6k0j'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Plana',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Pruebas.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Pruebas.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'pruebastabla',
        'USER': 'root',
        'PASSWORD': 'sa12345',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'



VIEWS.PY

from django.shortcuts import render_to_response
from django.template import RequestContext

def index(request):
    jefes = []
    empleados = []    
    return render_to_response('index.html',{'empleados':empleados, 'jefes':jefes}, context_instance = RequestContext(request))
    

MODELS.PY

from __future__ import unicode_literals
from django.db import models
from datetime import datetime

class empleado(models.Model):
    identificador = models.AutoField(primary_key=True)
    nombre = models.CharField(default="", max_length=45)
    apellido = models.CharField(default="", max_length=45)
    posicion = models.CharField(default="", max_length=45)
    oficina = models.CharField(default="", max_length=45)
    fecha = models.CharField(default="", max_length=45)
    salario = models.IntegerField(default=0)

    def __unicode__(self):
        return self.apellido
            
class jefe(models.Model):
    identificador = models.AutoField(primary_key=True)
    nombre = models.CharField(default="", max_length=45)
    apellido = models.CharField(default="", max_length=45)
    posicion = models.CharField(default="", max_length=45)
    oficina = models.CharField(default="", max_length=45)
    fecha = models.DateTimeField(default=datetime.now())
    salario = models.IntegerField(default=0)

    def __unicode__(self):
        return self.apellido
        
        
        
ADMIN.PY

from django.contrib import admin
from Plana.models import jefe, empleado

class empleadoAdmin(admin.ModelAdmin):
    list_display = ('nombre','apellido','posicion','oficina', 'fecha', 'salario')
    list_editable = ('salario', 'fecha')
    list_filter = ('nombre', 'apellido')
    ordering = ('identificador',)
    search_fields = ('apellido',)
    list_per_page = 5
    pass

admin.site.register(empleado, empleadoAdmin)
admin.site.register(jefe)
