VIEWS.PY.

class OutOfModel:
    def __init__(self, def_record, list):
        self.def_record = def_record
        self.list = list

class Paginator:
    def __init__(self, hasPrevious, hasNext, numPages, page, actualNumberInit, actualNumberFinish, totalNumber):
        self.hasPrevious = hasPrevious
        self.hasNext = hasNext
        self.numPages = numPages
        self.page = page
        self.previous = page - 1
        self.next = page + 1
        self.actualNumberInit = actualNumberInit
        self.actualNumberFinish = actualNumberFinish
        self.totalNumber = totalNumber
        
numPerPage = 25

def index(request):
    errores = []
    mygetModels = getModels()
    modelsTables = mygetModels.getTablesModels()
    table_name = 'src_exec_job_depen'
    try:
        con = mysql.connector.connect(....)
        cur = con.cursor()
        query = "SELECT * FROM " + "table_name "
        cur.execute(query)
        result_headers = [i[0] for i in cur.description]
    
        rows = cur.fetchall()
        results = []
        for row in rows:
            string_def = ""
            result = []
            for field in row:
                string_def += str(field) + "-"
                result += [str(field)]
            results += [OutOfModel(string_def, zip(result, result_headers))]
    
    except Exception as e:
        errores += ['Se ha producido un error accediendo a la Tabla']    
        con.close()
        
    if request.method == 'POST':
        list_checks = request.POST.getlist('record')
        opcion = request.POST['opcion']
        cursor = con.cursor()
        print list_checks
        if opcion == 'actualizar':
            if len(list_checks) == 0:
                errores += ['No se ha seleccionado ningún registro a modificar']
                print "hola"
            else:
                for check in list_checks:
                    queryString = "UPDATE " + "table_name " + "SET "
                    queryString1 = " WHERE "
                    check_fields = check.split("-")
                    for i in xrange(len(result_headers)):
                        queryString += result_headers[i] + "=" + request.POST[check + result_headers[i]] + ", "
                        queryString1 += result_headers[i] + "=" + check_fields[i] + ", "
                    queryString = queryString[:len(queryString)-2]
                    queryString1 = queryString1[:len(queryString1)-2]
                    queryString += queryString1
                    try:
                        cursor.execute(queryString)
                    except Exception as e:
                        errores += ['Se ha producido un error al actualizar en la tabla' + " table_name " + 'la query: ' + queryString]
                        errores += [e.message]
                    
        elif opcion == 'borrar':
            if len(list_checks) == 0:
                errores += ['No se ha seleccionado ningún registro a eliminar']
            else:
                for check in list_checks:
                    queryString = "DELETE " + "table_name " + " WHERE "
                    check_fields = check.split("-")
                    for i in xrange(len(result_headers)):
                        queryString += result_headers[i] + "=" + check_fields[i] + ", "
                    queryString = queryString[:len(queryString)-2]
                    print queryString
                    try:
                        cursor.execute(queryString)
                    except Exception as e:
                        errores += ['Se ha producido un error al eliminar en la tabla' + " table_name " + 'la query: ' + queryString]
                        errores += [e.message]
        elif opcion == 'insertar':
            queryString = "INSERT INTO " + "table_name" + "VALUES("
            for value in result_headers:
                queryString += request.POST[value] + ", "
            queryString = queryString[:len(queryString)-2]
            queryString += ")" 
            try:
                cursor.execute(queryString)
            except Exception as e:
                errores += ["Se ha producido un error al insertar en la tabla" +  " table_name "  + "la query: " + queryString]
                errores += [e.message]
        
        con.close()
        
    hasNext = True
    hasPrevious = True
    page = int(request.GET.get('pageNumber', 1))
    numPages = len(results) / (numPerPage * 1.0)
    totalNumber = len(results)
    
    if numPages > (len(results) / numPerPage):
        numPages = int(round((len(results) / numPerPage))) + 1
    else:
        numPages = int(round((len(results) / numPerPage)))
    
    print page
    print numPages 
    if page >= numPages:
        page = numPages
        hasNext = False
        hasPrevious = True
        actualNumberInit = ((page-1)*numPerPage) + 1
        actualNumberFinish = totalNumber
    elif page <= 1:
        page = 1
        hasPrevious = False
        hasNext = True
        actualNumberInit = 1
        actualNumberFinish = page*numPerPage
    else:
        hasNext = True
        hasPrevious = True
        actualNumberInit = ((page-1)*numPerPage) + 1
        actualNumberFinish = page*numPerPage
        
    results = results[actualNumberInit:actualNumberFinish]

    paginator = Paginator(hasPrevious, hasNext, numPages, page, actualNumberInit, actualNumberFinish, totalNumber)            
         
    return render_to_response('admin/outOfModel.html',{'modelsTables':modelsTables, 'results':results, 'result_headers':result_headers, \
                                                       'errores':errores, 'table_name':table_name, 'paginator': paginator}, RequestContext(request))
                                                       
TEMPLATE.

<!DOCTYPE html>  
{% load staticfiles %}
<html>
	<head>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<title></title>
		{% block style_css %}
		<link rel="stylesheet" href="{% static 'css/base.css' %}"/>
		<link rel="stylesheet" href="{% static 'css/OutOfModel.css' %}"/>
		<link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}"/>
		<link rel="stylesheet" href="{% static 'css/bootstrap-theme.min.css' %}"/>
		<link rel="stylesheet" href="{% static 'css/bootsrap-dropdrownSubmenu.css' %}"/>
    	{% endblock %}
		{% block scripts %}
		<script type="text/javascript" src="{% static 'js/functions.js' %}"></script>
		<script type="text/javascript" src="{% static 'js/jquery.min.js' %}"></script>
		{% endblock %}
	</head>
	<body>
		<div>
			{% include 'index/menu.html' %}
			</br></br></br></br>
			{% block content %}
			<form method="post"> 
			{% csrf_token %}
				<div class="containerOutOfModel">
					<h2>{{ table_name }}</h2></br>
					<table class="tableDjangoAdmin table-striped table-hover">
				
						<thead>
						<tr>
							<th class="padding">Registros sobre los que actuar</th>
							{% for header in result_headers %}
								<th scope="col" class="padding">{{ header }}</th>
							{% endfor %}
						</tr>
						</thead>
					
						<tbody>
							{% for result in results %}
								<tr class="{% cycle 'row1' 'row2' %}">		    		
							    	<td><input type="checkbox" name="record" value="{{ result.def_record }}" /></td>
			    					{% for item in result.list %}
			        					<td><input type="textbox" name="{{ result.def_record }}{{ item.1 }}" value="{{ item.0 }}"/></td>
			    					{% endfor %}
								</tr>
							{% endfor %}
						</tbody>
				
					</table>
					
					</br>
					
					<div>
    					{% if paginator.hasPrevious %}
        					<a href="/admin/db/index/?pageNumber={{ paginator.previous }}"> <input type="button" class="insertar" value="<<"/> </a>
    					{% endif %}
    					{% if paginator.hasNext %}
        					<a href="/admin/db/index/?pageNumber={{ paginator.next }}"> <input type="button" class="insertar" value=">>"/> </a>
    					{% endif %}
        				<span class="current">
            				&nbsp;&nbsp;&nbsp;Page {{ paginator.page }} of {{ paginator.numPages }}. Show record: {{ paginator.actualNumberInit}} to record: {{ paginator.actualNumberFinish}} of {{ paginator.totalNumber}} All.
        				</span>
					</div>
					
					</br></br>
					
					<div id='insertar'>
						<table class="tableDjangoAdmin table-striped table-hover">
							<thead>
							<tr>
								<th class="padding">Insertar Registro</th>
								{% for header in result_headers %}
									<th class="padding" scope="col">{{ header }}</th>
								{% endfor %}
							</tr>
							</thead>
							<tr>
								<td>Registro que insertaremos</td>
								{% for header in result_headers %}
									<td><input type='textbox' name='{{ header }}'/>&nbsp;&nbsp;</td>
								{% endfor %}
							</tr>
						</table>

					</div>
					</br></br>
					<select id='opcion' name='opcion'>
						<option value='borrar'>--Borrar--</option>
						<option value='actualizar'>--Actualizar--</option>
						<option value='insertar'>--Insertar--</option>
					</select><input id='submit' class="btn btn-info" type="submit" value="Ejecutar Accion"/>
				</div>
			</form>
			
			{% if errores %}
				{% for error in errores %}
					</br></br><p style='color:red'>{{ error }}</p>
				{% endfor %}
			{% endif %}
			{% endblock %}
			
			</br></br>
		</div>
		
	</body>
</html>


URLS.PY.

url(r'^admin/db/index/$', 'db.views.index'),
