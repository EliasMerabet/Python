from __future__ import unicode_literals

import keyword
import re
from collections import OrderedDict

from django.core.management.base import BaseCommand, CommandError
from django.db import DEFAULT_DB_ALIAS, connections


class Command(BaseCommand):
    help = "Introspects the database tables in the given database and outputs a Django model module."

    requires_system_checks = False

    db_module = 'django.db'

    def add_arguments(self, parser):
        parser.add_argument('--database', action='store', dest='database',
            default=DEFAULT_DB_ALIAS, help='Nominates a database to '
            'introspect. Defaults to using the "default" database.')

    def handle(self, **options):
        try:
            for line in self.handle_inspection(options):
                self.stdout.write("%s\n" % line)
        except NotImplementedError:
            raise CommandError("Database inspection isn't supported for the currently selected database backend.")

    def handle_inspection(self, options):
        connection = connections[options['database']]
        # 'table_name_filter' is a stealth option
        table_name_filter = options.get('table_name_filter')

        table2model = lambda table_name: re.sub(r'[^a-zA-Z0-9]', '', table_name.title())
        strip_prefix = lambda s: s[1:] if s.startswith("u'") else s

        with connection.cursor() as cursor:
            yield '#!/frontWeb/manage.py'
            yield '# -*- coding: UTF-8 without BOM -*-'
            yield '#'
            yield '# Author: Beresoft'
            yield '#' 
            yield ''
            yield 'from %s import models' % self.db_module
            yield 'from db.models import *'
            yield 'from db.MyAdminSite import admin_site'
            yield 'from django.contrib import admin'
            yield 'from db.utilities import getModels'
            yield 'records_Per_Page = 50'

            known_models = []

            for table_name in connection.introspection.table_names(cursor):

                if table2model(table_name).startswith('Django') or table2model(table_name).startswith('SrcAgg') or table2model(table_name).startswith('Auth'):
                    continue

                if table_name_filter is not None and callable(table_name_filter):
                    if not table_name_filter(table_name):
                        continue
                    
                yield ''
                yield ''
                yield 'class %s(admin.ModelAdmin):' % (table2model(table_name) + 'Admin')
                known_models.append(table2model(table_name))
                
                
                c_l_view = '\n\n    def changelist_view(self, request, extra_context=None):\n        extra_context = extra_context or {} \
                \n        mygetModels = getModels()\n        extra_context["modelsTables"] = mygetModels.getTablesModels()\n        return super(%s, self).changelist_view(request, extra_context=extra_context)' % (table2model(table_name)+'Admin')
                
            
                defUnicode = ''
                l_display = ''
                l_edit = ''
                first = ''
  
                for row in connection.introspection.get_table_description(cursor, table_name):
                    comment_notes = []  # Holds Field notes, to be displayed in a Python comment.
                    extra_params = OrderedDict()  # Holds Field parameters such as 'db_column'.
                    column_name = row[0]
                    
                    
                    if row[0] != 'id':
                        l_display += '\'' + row[0] + '\','
                        
                    if first == '':
                        first = '\'' + row[0] + '\','
                    
                    
                l_edit = '    list_editable = [' + l_display + ']'
                l_display = '    list_display = [' + l_display + ']'
                ordering = '    ordering = (' + first + ')'
                s_fields = '    search_fields = [' + first + ']'
                n_pagination = '    list_per_page = records_Per_Page'
                yield l_display
                yield l_edit
                yield ordering
                yield s_fields
                yield n_pagination
                yield c_l_view
                
                
        yield ""
        yield ""  
        for tableModel in known_models:
            yield 'admin_site.register(%s, %s)' % (tableModel, tableModel+'Admin')
