FUNCTION.

#!/usr/bin/python

import os
import time
import sys


class name_command:
    """
    Atributes:
        argument1: A string indicating ...
        argument2: A int indicating ...
    """
    
    def __init__(self, arg1=None, arg2=None):
        """Inits class with the arguments"""
        if arg1 != None:
            self.arg1 = arg1
        else:
            self.arg1 = os.environ.get('arg1')
        if timeout != None:
            self.arg2 = arg2
        else:
            self.arg2 = os.environ.get('arg2')

    def checkSomething(self):
        try:
            timesChecked = 0
            if (self.arg2 > max):
                print ("Timeout higher than max.")
                sys.exit(1)
            else:
                while (self.arg2 * times) < max:
                    time.sleep(self.arg2)
                    if os.path.isdir(self.arg1) or os.path.exists(self.arg1):
                        print 0
                        sys.exit()
                    timesChecked += 1
            
        except Exception as e:
            print time.strftime('%Y/%m/%d %H:%M:%S ') + "ARGUMENTS: arg1 - " + self.arg1 + " arg2 - " + self.arg2 +'ERROR' + ': ' + ' -- ' + str(e)
        print 1
        sys.exit()
        

LAUNCHER.

#!/usr/bin/python
# Use: name_command.py -arg1 <...> -arg2 <...>
# Example: waitForPath.py -arg1 '...' -arg2 10 

import os
import time
import sys
import argparse
from name_command import name_command


def main(argv):
    try:
        parser = argparse.ArgumentParser(description='...')
        parser.add_argument("-arg1", help='A string indicating...  - Mandatory.', required=True)
        parser.add_argument("-arg2", help='A int indicating...  - Mandatory.', type=int, \
                            required=True)
        args = parser.parse_args()
        
        nC = name_command(args.arg1, args.arg2)
        sys.exit(nC.checkSomething())
        
    except Exception as e:
        print str(e)
        sys.exit(1)
    

if __name__=='__main__':
    main(sys.argv[1:])
